version: '2'
# Settings and configurations that are common for all containers
x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2024-06-29T01-20-47Z
  command: server --console-address ":9001" http://minio{1...4}/data{1...2}
  expose:
    - "9000"
    - "9001"
  environment:
    MINIO_ROOT_USER: minioadmin
    MINIO_ROOT_PASSWORD: minioadmin
  healthcheck:
    test: ["CMD", "mc", "ready", "local"]
    interval: 5s
    timeout: 5s
    retries: 5

services:
  postgres:
    hostname: postgres
    image: postgres:13
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: hive_metastore_db
      POSTGRES_PASSWORD: hive_metastore_db
      POSTGRES_DB: hive_metastore_db
    volumes:
      - ./src/postgresql/:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "hive_metastore_db"]
      interval: 5s
      retries: 5
    restart: always


  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2

  minio3:
    <<: *minio-common
    hostname: minio3
    volumes:
      - data3-1:/data1
      - data3-2:/data2

  minio4:
    <<: *minio-common
    hostname: minio4
    volumes:
      - data4-1:/data1
      - data4-2:/data2

  nginx:
    image: nginx:1.19.2-alpine
    hostname: minio
    volumes:
      - ./src/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4

  hive-metastore:
    hostname: hive-metastore
    #image: 'bitsondatadev/hive-metastore:latest'
    #image: 'my-hive-metastore:latest'
    build: src/hive-metastore/.
    ports:
      - '9083:9083' # Metastore Thrift
    volumes:
      - ./src/hive-metastore/conf/metastore-site.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
    environment:
      METASTORE_DB_HOSTNAME: postgres
      METASTORE_TYPE: postgres
    depends_on:
      - postgres

  trino:
    hostname: trino
    build: src/trino/.
    command: /usr/local/bin/docker-entrypoint.sh
    user: root
    volumes:
      - ./src/trino/install.properties:/ranger-3.0.0-SNAPSHOT-trino-plugin/install.properties
      - ./src/trino/etc/catalog/minio.properties:/etc/trino/catalog/minio.properties:ro
      - ./src/trino/etc/catalog/postgres.properties:/etc/trino/catalog/postgres.properties:ro
    ports:
      - '8089:8080'

  postgres-sample:
    image: quay.io/debezium/example-postgres:1.9
    hostname: postgressample
    ports:
     - 5433:5432
    environment:
     - POSTGRES_USER=postgres
     - POSTGRES_PASSWORD=postgres
     - POSTGRES_DB=postgres
  
  ranger-admin:
    image: aakashnand/trino-ranger-demo:v4.0
    #build: src/ranger-admin/.
    container_name: ranger-admin
    hostname: ranger-admin
    entrypoint: /root/ranger-admin/docker-entrypoint.sh
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 6G
        reservations:
          cpus: '1'
          memory: 5G
    ports:
      - 6080:6080
    volumes:
      - ./src/ranger-admin:/root/ranger-admin
      
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1
    container_name: es01
    hostname: es01
    environment:
      discovery.type: single-node
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: -Xms500m -Xmx500m
    ports:
      - 9200:9200
    volumes:
    - ranger-es-data:/usr/share/elasticsearch/data      
volumes:
  ranger-es-data:
  artifacts:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2:   
  shared-workspace:
    name: "hadoop-distributed-file-system"
    driver: local